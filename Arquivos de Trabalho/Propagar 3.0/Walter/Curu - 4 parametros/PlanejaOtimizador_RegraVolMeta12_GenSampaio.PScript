
var
// Essa planeja faz o seguinte, toda vez que é chamada pelo otimizador:

// 1. Recebe do otimizador os valores dos volumes meta, relativos ao intervalo
//    de tempo vigente para o reservatorio Gen Sampaio
//   (o otimizador esta trbalhando com 12 parametros para cada reservatorio)

// 2. Calcula os deficits hidricos observados nos PC que estao a jusante dos reservatorios da
//    bacia

// 3. Obtem através dos objetos PC correspondentes os valores dos armazenamentos dos reservatórios.
//    Se for o dt igual a um, pega o volume inicial informado pelo usuario nas caracteristicas dos PCs.
//    No caso dos demais dt´s pega o volume remanescente após efetuado o balanço hídrico de cada simulaçao,
//    ou seja, o armazenamento final do dt anterior a simulação atual.

// 4. Determina para o reservatorio Gen Sampaio a descarga de acordo com a sua disponibilidade e com os
//    valores dos volume meta da simulaçao atual e do intervalo de tempo mensal correspondente

// 5. Determina para os demais reservatórios suas descargas, de acordo com a soma dos deficits dos PCs sob
//    sua responsabilidade e com as suas disponibilidades hídricas.

// 6. confirma as demandas planejadas igualando-as as demandas totais, deixando para o PROPAGARMOO em si
//    a definição do grau efetivo de atendimento as mesmas, de acordo com os procedimentos internos
//   (balanço hídrico em cada PC e rotina de racionamento quando necessário) e com as prioridades de atendimento.

// Declaração das variáveis
    // Variáveis pré-inicializadas (só documentação)
    // Saida    : Object; {Variável já inicializada pelo sistema}
    // Projeto  : Object; {Variável já inicializada pelo sistema}

    // Variáveis de trabalho = declaração obrigatória

    // Varáveis p/ conter os objetos PC
    PCatual, PC01:         object;

    // Variáveis para conter contadores, intervalo de tempo atual,
    // Número de intervalos, numero de PCs do projeto,
    // e número de reservatórios estratégicos à montante do PC
    i, j, dt, NumIntSim, NumeroPcs  : Integer;

    // Variáveis para conter mês e ano correspondentes ao deltaT atuaL
    mes, ano : integer;



    // Variável para conter os nomes dos PCs
    ListadePCs : Object; // globais

    // Variáveis auxiliares:
    Disponibilidade, Libera              : Real;


    // Variáveis que vão conter os valores dos parâmetros de racionamento alfa,
    // para cada reservatório estratégico, e que receberão os parâmetros do rosenbrok
    VolMetaGenSam                                                               :Object;


    // Variáveis para conter os armazenamentos iniciais dos reservatórios
    VolInicPC01                    : Real;

begin
  dt        := Projeto.ObtemDeltaT;      // Obtem o intervalo de simulação atual
  NumIntSim := Projeto.Total_IntSim;     // Obtem o total de intervalo de simulação
  NumeroPcs := Projeto.NumPCs;           // Obtem o numero de PCs no projeto
  Projeto.DeltaT_ComoData(dt, mes, ano); // Obtem o mês e o ano do delta T atual

  // Recupera a variável global com a lista dos PCs
  ListadePCs     := TStringList(GlobalObjects.Get('ListadePCs'));


   // Inicialização dos PCs
  PC01 := Projeto.PCPeloNome('PC01');

  // Recupera objetos definidos como parâmetros do Rosenbrock
  VolMetaGenSam := Projeto.Otimizador.Parameters.ParamByName('VolMetaGenSam' + toString(mes));

  // Obtenção dos volumes dos reservatórios no inicio do intervalo
  If dt = 1
    Then
        VolInicPC01 := PC01.VolumeInicial
    Else
        VolInicPC01 := PC01.ObtemVolume(dt-1);

  // 1. Planejamento da descarga da barragem  General Sampaio: PC01
  // Neste script a liberação de água do reservatorio independe das demandas previstas
  // e so depende da verificação da obdiência do volume meta previsto para o reservatório
  // com os valores em Hm3

  // A disponibilidade é igual aos seguintes termos:
  // volume inicial no reservatório,
  // menos o volume morto,
  // mais a afluência da subbacia, convertida em Hm3
  Disponibilidade := VolInicPC01 - PC01.VolumeMinimo + PC01.m3_Hm3_Intervalo(PC01.ObtemVazaoAfluenteSBs);

  // Testa se a disponibilidade no aç GenSampaio é maior que a descarga prevista, mais o fator de racionamento
  // previsto para o mes atual
  if (Disponibilidade > VolMetaGenSam.GetValue)

    // Disponibilidade é maior que o volume meta previsto para o mes
    then
       begin
          // Calcula o excesso d´agua em relação ao volume meta
          Libera := Disponibilidade - VolMetaGenSam.GetValue;
          // Converte de Hm3 para m3 o valor da liberação
          Libera := PC01.Hm3_m3_Intervalo(Libera);
          // Atribui o defluvio planejado para o PC01, no dt atual e em m3
          PC01.AtribuiDefluvioPlanejado(dt,Libera);
       end
    // Disponibilidade é menor que o volume meta
    else
       // Anula o defluvio planejado para o PC01, no dt atual e em m3
       PC01.AtribuiDefluvioPlanejado(dt,0.0);


  // Planejamento do atendimento às demanadas em cada PC,
  // Confirma as demandas totais como planejadas, que serão atendidas na medida do possivel durante a simulação
  for j := 1 to NumeroPCs do
    begin
      // PCatual assume o PC que estiver vigente na varredura do índice j
      PCatual := Projeto.PCPeloNome(listadePCs.Get(j-1));
          for i := 1 to 3 do
            PCatual.AtribuiValorDemanda(dt,i,'P',PCatual.ObtemValorDemanda(dt, i, 'T'))
    //fim da varredura entre os PCs 
    end;


// fim do script da rotina planeja }
end.
